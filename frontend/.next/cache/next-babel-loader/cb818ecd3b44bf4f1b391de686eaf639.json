{"ast":null,"code":"import _defineProperty from \"/Users/martimad/Projects/capstone/FarmersSpecial/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ACTION_TYPES } from '../actions/product';\nconst initialState = {\n  list: []\n};\nexport const product = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_ALL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: [...action.payload]\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/martimad/Projects/capstone/FarmersSpecial/frontend/src/reducers/product.js"],"names":["ACTION_TYPES","initialState","list","product","state","action","type","FETCH_ALL","payload"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,oBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;AAIA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACH,YAAP,EAAqBI,MAArB,KAAgC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,YAAY,CAACO,SAAlB;AACI,6CACOH,KADP;AAEIF,QAAAA,IAAI,EAAE,CAAC,GAAGG,MAAM,CAACG,OAAX;AAFV;;AAKJ;AACI,aAAOJ,KAAP;AARR;AAUH,CAXM","sourcesContent":["import { ACTION_TYPES } from '../actions/product';\n\nconst initialState = {\n    list: []\n}\n\nexport const product = (state=initialState, action) => {\n    switch (action.type) {\n        case ACTION_TYPES.FETCH_ALL:\n            return {\n                ...state,\n                list: [...action.payload]\n            }\n\n        default: \n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}